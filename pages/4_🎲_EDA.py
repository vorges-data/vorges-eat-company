# Libraries
import pandas as pd
import numpy as np
import inflection
import plotly.express as px
from PIL import Image
import streamlit as st
import matplotlib.pyplot as plt
import folium
from folium.plugins import MarkerCluster
from streamlit_folium import folium_static


#========================================================================
#==================== Vari√°veis Auxiliares ==============================
#========================================================================
FILE_PATH = '/home/vinicius/repos/projeto_ftc_vorges/datasets/zomato.csv'

COUNTRIES = {
    1: "India",
    14: "Australia",
    30: "Brazil",
    37: "Canada",
    94: "Indonesia",
    148: "New Zeland",
    162: "Philippines",
    166: "Qatar",
    184: "Singapure",
    189: "South Africa",
    191: "Sri Lanka",
    208: "Turkey",
    214: "United Arab Emirates",
    215: "England",
    216: "United States of America",
}


COLORS = {
    "3F7E00": "darkgreen",
    "5BA829": "green",
    "9ACD32": "lightgreen",
    "CDD614": "orange",
    "FFBA00": "red",
    "CBCBC8": "darkred",
    "FF7800": "darkred",
}

#========================================================================
#==================== Fun√ß√µes Auxiliares ================================
#========================================================================

# Descri√ß√£o dos dados
def describe_attributes(dataframe):
    return dataframe.describe()


# Fun√ß√£o que retorna as vari√°veis num√©ricas
def get_numerical_attributes(dataframe):
    return dataframe.select_dtypes(include=['int64', 'float64'])

# Fun√ß√£o que retorna as vari√°veis categ√≥ricas
def get_cat_attributes(dataframe):
    return dataframe.select_dtypes(exclude=['int64','float64'])

# renomear as colunas em snakecase 
def rename_columns(dataframe):
    df = dataframe.copy()
    title = lambda x: inflection.titleize(x)
    snakecase = lambda x: inflection.underscore(x)
    spaces = lambda x: x.replace(" ", "")
    cols_old = list(df.columns)
    cols_old = list(map(title, cols_old))
    cols_old = list(map(spaces, cols_old))
    cols_new = list(map(snakecase, cols_old))
    df.columns = cols_new

    return df

# Substituir o c√≥digo do pa√≠s pelo seu nome
def country_name(country_id):
    return COUNTRIES[country_id]


# Substituir o c√≥digo da cor por seu nome
def color_name(color_code):
    return COLORS[color_code]

# Substituir o price_range pelas nomes
def create_price_tye(price_range):
    if price_range == 1:
        return "cheap"
    elif price_range == 2:
        return "normal"
    elif price_range == 3:
        return "expensive"
    else:
        return "gourmet"
    
# Ajustar as ordens das colunas
def adjust_columns_order(dataframe):
    df = dataframe.copy()
    new_cols_order = [
        "restaurant_id",
        "restaurant_name",
        "country",
        "city",
        "address",
        "locality",
        "locality_verbose",
        "longitude",
        "latitude",
        "cuisines",
        "price_type",
        "average_cost_for_two",
        "currency",
        "has_table_booking",
        "has_online_delivery",
        "is_delivering_now",
        "aggregate_rating",
        "rating_color",
        "color_name",
        "rating_text",
        "votes",
    ]
    return df.loc[:, new_cols_order]

# Processar e ransformar os dados
def process_data(file_path):
    df = pd.read_csv(file_path)
    df = df.dropna()
    df = rename_columns(df)
    df["price_type"] = df.loc[:, "price_range"].apply(lambda x: create_price_tye(x))
    df["country"] = df.loc[:, "country_code"].apply(lambda x: country_name(x))
    df["color_name"] = df.loc[:, "rating_color"].apply(lambda x: color_name(x))
    df["cuisines"] = df.loc[:, "cuisines"].apply(lambda x: x.split(",")[0])
    df = df.drop_duplicates()
    df = adjust_columns_order(df)
    df.to_csv('/home/vinicius/repos/projeto_ftc_vorges/datasets/data_processed.csv', index=False)
    return df

# Fun√ß√£o - Medidas Estat√≠sticas
def get_first_order_statistics(dataframe):
    # M√©tricas de Tend√™ncia Central
    mean = pd.DataFrame(dataframe.apply(np.mean)).T
    median = pd.DataFrame(dataframe.apply(np.median)).T

    # M√©tricas de dispers√£o
    min_ = pd.DataFrame(dataframe.apply(min)).T
    max_ = pd.DataFrame(dataframe.apply(max)).T
    range_ = pd.DataFrame(dataframe.apply(lambda x: x.max() - x.min())).T
    std = pd.DataFrame(dataframe.apply(np.std)).T
    skew = pd.DataFrame(dataframe.apply(lambda x: x.skew())).T
    kurtosis = pd.DataFrame(dataframe.apply(lambda x: x.kurtosis())).T

    # M√©tricas de Concatena√ß√£o
    m = pd.concat([min_, max_, range_, mean, median, std, skew, kurtosis]).T.reset_index()
    m.columns = ['attributes', 'min', 'max', 'range', 'mean', 'median', 'std', 'skew', 'kurtosis']
    
    return m


# Carregar os dados
df_raw = pd.read_csv(FILE_PATH)

# Copy
df1 = df_raw.copy()

# Chamar a fun√ß√£o para renomear as colunas
df1 = rename_columns( df1 )


# Chamar a fun√ß√£o para processar os dados
df2 = process_data(FILE_PATH)


def dataframe_dimensions(dataframe):
    print(f'N√∫mero de linhas: {dataframe.shape[0]}')
    print(f'N√∫mero de colunas: {dataframe.shape[1]}')
    
    return None

#========================================================================
#========================== Menu Lateral ================================
#========================================================================
st.set_page_config(page_title='EDA', page_icon='üé≤', layout='wide')

st.header('Vorges Eat Marktplace: Dashboard Estat√≠stica Descritiva')
st.markdown("""---""")


#============================= Imagem Inicial ==========================
image2 = Image.open('eda.jpg')
st.image(image2, caption= 'Exploratory Data Analysis', width=620)


#===========================
# Criar o menu lateral
#===========================
image = Image.open('Logo Preto Sem Fundo.png')
st.sidebar.image( image, width = 120)

st.sidebar.markdown('# Vorges Eat')
st.sidebar.markdown('## Seu Marketplace de Restaurantes')
st.sidebar.markdown("""---""")

st.sidebar.markdown('## Filtros')

#============================================================================

# Filtro 1
countries = st.sidebar.multiselect(
    'Escolha os Pa√≠ses que deseja visualizar:',
    df2.loc[:,'country'].unique().tolist(),
    default=['Brazil','England','Qatar','South Africa','Canada','Australia']
)
st.sidebar.markdown("""---""")

# Filtro 2
price_type_filter = st.sidebar.multiselect(
    'Escolja o Tipo de Pre√ßo Avaliado:',
    df2.loc[:,'price_type'].unique().tolist(),
    default = ['expensive', 'gourmet', 'normal', 'cheap']
)
st.sidebar.markdown("""---""")


#========================================================================
#========================== Ativando filtros ============================
#========================================================================

# Filtro 1
linhas_selecionadas_countries = df2['country'].isin( countries )
df2 = df2.loc[linhas_selecionadas_countries, :]

# Filtro 2
linhas_selecionadas_price = df2['price_type'].isin( price_type_filter )
df2 = df2.loc[linhas_selecionadas_price, :]



#========================================================================
#========================== Layout no Streamlit =========================
#========================================================================

with st.container():
    col1, col2 = st.columns( 2 )
    
    with col1:
        
            # ==================================== TEXTO DIMENSAO DADOS =============
            qt_lines = df1.shape[0]
            qt_cols  = df1.shape[1]
            
            st.markdown('##### Dimens√£o dos Dados antes do Processamento')
            st.write(f'N√∫mero de linhas: {qt_lines}')
            st.write(f'N√∫mero de colunas: {qt_cols}')
            #=============================================
            
            qt_lines_2 = df2.shape[0]
            qt_cols_2  = df2.shape[1]
            
            st.markdown('##### Dimens√£o dos Dados ap√≥s o Processamento')
            st.write(f'N√∫mero de linhas: {qt_lines_2}')
            st.write(f'N√∫mero de colunas: {qt_cols_2}')
            #=============================================
            
    with col2:
            #======================================== RESUMO ======================
            st.markdown('##### Resumo')
            
            # N√∫mero de dados perdidos
            diff_data = qt_lines - qt_lines_2
            st.write(f'Quantidade de dados perdidos: {diff_data}')
            
            # Calcular a porcenagem de dados perdidos
            percent_data = (((qt_lines_2 / qt_lines) -1)*100)*-1
            st.write('Ap√≥s o Processamento dos Dados perdemos {:.2f}% dos dados.'.format(percent_data))

            
st.write("""---""")
        
#============================== Containers das Tabelas ========================

with st.container():
    col1, col2 = st.columns( 2 )
    
    # Tabela das vari√°veis num√©ricas
    with col1:
        st.markdown('##### Vari√°veis Num√©ricas')
        
        numerical_data = get_numerical_attributes(df1)
        numerical_data_df = pd.DataFrame( numerical_data.columns, columns = ['Colunas Num√©ricas'] )
        st.dataframe(numerical_data_df)
        
        
    # Tabela das vari√°veis categ√≥ricas
    with col2:
        st.markdown('##### Vari√°veis Categ√≥ricas')
        
        cat_data = get_cat_attributes(df1)
        cat_data_df = pd.DataFrame( cat_data.columns, columns = ['Colunas Categ√≥ricas'] )
        st.dataframe(cat_data_df)


st.write("""---""")

#========================GRAFICO DE HISTOGRAMA VARIAVEIS NUM ======================
st.markdown('##### Distribui√ß√£o das vari√°veis num√©ricas')
image = Image.open('hist.png')
st.image(image, caption= 'Vari√°veis Num√©ricas')

st.write("""---""")



#========================== TABELA ESTATISTICA ====================================
st.markdown('### Estat√≠stica de Primeira Ordem')
df_aux = get_first_order_statistics(numerical_data)
st.dataframe(df_aux)
st.markdown(
    """
    ### Significado das medidas estat√≠stica:
    
    - **Min:** M√≠nimo-> O menor valor observado em um conjunto de dados. Ou seja, √© o valor mais baixo que aparece na amostra ou popula√ß√£o que est√° sendo analisada.
    
    - **Max:** M√°ximo-> O maior valor observado em um conjunto de dados. Ou seja, √© o valor mais alto que aparece na amostra ou popula√ß√£o que est√° sendo analisada.
    
    - **Range:** Amplitude-> √â a diferen√ßa entre o maior e o menor valor observados em um conjunto de dados. Ou seja, √© a amplitude dos valores que aparecem na amostra ou popula√ß√£o que est√° sendo analisada.
    
    - **Mean:** M√©dia-> A medida m√©dia na estat√≠stica √© a soma dos valores observados em um conjunto de dados dividida pelo n√∫mero de observa√ß√µes. Em outras palavras, √© o valor central que representa o conjunto de dados de forma geral. √â frequentemente chamado de "m√©dia aritm√©tica".
    
    - **Median:** Mediana-> A medida mediana na estat√≠stica √© o valor que divide a amostra ou popula√ß√£o em duas partes iguais, sendo que metade dos valores √© menor ou igual a essa medida, e a outra metade √© maior ou igual. √â uma medida de tend√™ncia central que representa o valor m√©dio do conjunto de dados. √â menos sens√≠vel a valores extremos do que a m√©dia aritm√©tica.
    
    - **Std:** Desvio-Padr√£o-> A medida de desvio padr√£o na estat√≠stica √© uma medida de dispers√£o em torno da m√©dia. Ele indica o qu√£o longe os valores individuais est√£o da m√©dia, ou seja, o qu√£o "espalhados" est√£o os dados. Quanto maior o desvio padr√£o, mais os dados est√£o espalhados em rela√ß√£o √† m√©dia. Por outro lado, quanto menor o desvio padr√£o, mais pr√≥ximos os dados est√£o da m√©dia.
    
    - **Skew:** Assimetria-> A medida de skew (ou assimetria, em portugu√™s) na estat√≠stica √© uma medida que indica o grau de assimetria da distribui√ß√£o dos dados em rela√ß√£o √† m√©dia. Quando uma distribui√ß√£o √© sim√©trica, a medida de skew √© zero. Quando a distribui√ß√£o √© assim√©trica √† direita, ou seja, possui uma cauda longa na dire√ß√£o dos valores maiores, a medida de skew √© positiva. Quando a distribui√ß√£o √© assim√©trica √† esquerda, ou seja, possui uma cauda longa na dire√ß√£o dos valores menores, a medida de skew √© negativa.
    
    - **Kurtosis:** Curtose-> A medida de kurtosis na estat√≠stica √© uma medida que indica o grau de achatamento ou picosidade da distribui√ß√£o dos dados em rela√ß√£o √† distribui√ß√£o normal. Quando os dados s√£o mais achatados e possuem menos pico do que a distribui√ß√£o normal, a medida de kurtosis √© negativa. Quando os dados possuem mais pico do que a distribui√ß√£o normal, a medida de kurtosis √© positiva.
    
    """
)

st.write("""---""")

#========================== DESCRI√á√ÉO ESTAT√çSTICA ====================================
st.markdown('### Descri√ß√£o dos Dados')
describe_data = describe_attributes( df1 )
st.dataframe( describe_data )

st.write("""---""")

# ======================= TABELA PAISES UNICOS =======================================
st.markdown('### Conjunto de pa√≠ses do Dataset')
country_unique = pd.DataFrame(df2['country'].unique(), columns=['Pa√≠s'])
st.dataframe(country_unique)
